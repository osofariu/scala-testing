#+TITLE:    Testing in Scala
#+AUTHOR:   Ovi Sofariu
#+DATE:     July 11, 2016
#+EMAIL:    ovi@sofariu.com
#+HTML_HEAD: <link href="https://osofariu.github.io/css/solarized-light.css" rel="stylesheet"></link>
#+HTML_HEAD: <link href="https://osofariu.github.io/css/custom.css" rel="stylesheet"></link>
#+OPTIONS: H:2 num:nil toc:nil d:t *:t ':t \n:t @:t ::t |:t ^:nil _:nil

A styled version of this presentation can be found at:

 *[[https://osofariu.github.io/scala-testing-pres.html]]*


* Introduction

- General setup, and getting started
- Mostly covering ScalaTest
  - flavors of tests
  - practices for re-using fixtures
  - asserts, matchers, etc.
- ScalaCheck


* SBT Setup & Running tests

** Setting-up the project in build.sbt

#+begin_example
libraryDependencies ++=  Seq(
  "org.scalatest"  %% "scalatest" % "3.0.0-RC3" % "test" withSources() withJavadoc(),
  "org.scalactic"  %% "scalactic" % "3.0.0-RC3" % "test" withSources() withJavadoc(),
  "org.scalacheck" %% "scalacheck" % "1.13.0"   % "test" withSources() withJavadoc()
)
#+end_example


** SBT basics
*** You can *chain* multiple commands to run tasks in batch mode, in sequential order:
#+begin_example
 sbt clean compile "testOnly TestA TestB"
#+end_example

*** You can continuously compile/test as you save your source files:
#+begin_example
 ~ compile , ~ test
 ~ testOnly *FunSpecSpec   // very useful when working on a spec
#+end_example
- this is very cool: you get instant feedback as soon as you save code changes
- I use it with IntelliJ, running sbt under IntelliJ terminal window


** SBT Tasks

*** *test*
- The test task accepts no command line arguments and runs all tests

*** *testOnly*
- this task accepts a whitespace separated list of test names to run.
- before version 0.13 this task was "test-only". As of 0.13 they both work.

#+begin_example
testOnly testingscala.tags.FixtureWithSpec  testingscala.certaintests.TagSpec
#+end_example

- *use wildcards* to run only certain tests by name:
#+begin_example
testOnly *FixtureWithSpec
#+end_example

- **with tags** to only run certain tests by tag:
  <<testOnly>>
#+begin_example
testOnly *TagSpec -- -n FastTest  // only run tests tagged as "FastTest"
testOnly *TagSpec -- -n SlowTest -n FastTest // run both "SlowTest" and "FastTest" tags
testOnly *TagSpec -- -l SlowTest  // exclude tests tagged as "SlowTest"
testOnly *TagSpec -- -l SlowTest  // exclude these tags
#+end_example

*** *testQuick* - like testOnly, but will *only* run tests that also match one of the following conditions:
- The tests that *failed* in the previous run
- The tests that *were not run* before
- The tests that have one or more *transitive dependencies*, maybe in a different project,
  recompiled.


* ScalaTest

** Testing Styles
A short guide: [[http://www.scalatest.org/user_guide/selecting_a_style]]

*** *FunSpec*

- Familiar to those who are used to rSpec.
- FunSpec allows you to nest your tests (like rSpec)

#+begin_src scala
  import org.scalatest.FunSpec

  class SetSpec extends FunSpec {

    describe("A Set") {
      describe("when empty") {
        it("should have size 0") {
          assert(Set.empty.size == 0)
        }

        it("should produce NoSuchElementException when head is invoked") {
          intercept[NoSuchElementException] {
            Set.empty.head
          }
        }
      }
    }
  }
#+end_src

Output:
#+begin_example
 A Set
   when empty
   - should have size 0
   - should produce NoSuchElementException when head is invoked
#+end_example

Why is *path.FunSpec* is better than FunSpec? See [[../src/test/scala/testingscala/styles/WithFunSpec.scala][WithFunSpec.scala]] for an example that demonstrates the difference

*** *FlatSpec*

- You can't nest tests
- You use verbs like: must, should, can to make your tests more meaningful
- Intuitive and simple to use

#+begin_src scala
    import org.scalatest.FlatSpec

    class SetSpec extends FlatSpec {

      "An empty Set" should "have size 0" in {
        assert(Set.empty.size == 0)
      }

      it should "produce NoSuchElementException when head is invoked" in {
        intercept[NoSuchElementException] {
          Set.empty.head
        }
      }
    }
#+end_src

Output:
#+begin_example
An empty Set
- should have size 0
- should produce NoSuchElementException when head is invoked
#+end_example

*** *FreeSpec*

- Facilitates a BDD-style, in which tests are nested inside text clauses denoted with the
  dash operator (-).
- It enforces no structure, so you have maximum flexibility.
- It has a version of path.FreeSpec just like FunSpec!
- Lack of structure makes it attractive to non-English speakers
- Unless you like typing the word "describe", why wouldn't you switch from FunSpec to FreeSpec?

Here's an example [[../src/test/scala/testingscala/styles/WithFreeSpec.scala][WithFreeSpec.scala]] that you can contrast [[../src/test/scala/testingscala/styles/WithFunSpec.scala][WithFunSpec.scala]].

#+begin_src scala
import org.scalatest.FreeSpec

class StackSpec extends FreeSpec {
  "A Stack" - {
    "whenever it is empty" - {
      "certainly ought to" - {
        "be empty" in {
          // ...
        }
        "complain on peek" in {
          // ...
        }
        "complain on pop" in {
          // ...
        }
      }
    }
    "but when full, by contrast, must" - {
      "be full" in {
        // ...
      }
      "complain on push" in {
        // ...
      }
    }
  }
}

#+end_src

Output:
#+begin_example
StackSpec:
A Stack
  whenever it is empty
    certainly ought to
    - be empty
    - complain on peek
    - complain on pop
  but when full, by contrast, must
  - be full
  - complain on push
#+end_example

*** *WordSpec*

- Familiar to those who are used to specs or specs2
- Syntax: "subject" when "condition" should "behavior" in { code block }
- Very prescriptive and more wordy, but it can help you think through how to structure
  your tests. See: [[https://github.com/osofariu/evercraft/blob/master/src/test/scala/katas/evercraft/AttackWordSpec.scala][AttackWordSpec]].

#+begin_src scala
  import org.scalatest.WordSpec

  class SetSpec extends WordSpec {

    "A Set" when {
      "empty" should {
        "have size 0" in {
          assert(Set.empty.size == 0)
        }

        "produce NoSuchElementException when head is invoked" in {
          intercept[NoSuchElementException] {
            Set.empty.head
          }
        }
      }
    }
  }
#+end_src


#+begin_example
 SetTestWordSpec:
 A Set
   when empty
   - should have size 0
   - should produce NoSuchElementException when head is invoked

#+end_example

*** *Spec*

- It allows you to *define tests as methods*, which saves one function literal per test
  which translates into faster compile times and fewer generated class files, which can
  help minimize build times.

- Using Spec can be a good choice in large projects where build times are a concern as
  well as when generating large numbers of tests programmatically via static code
  generators.

#+begin_src scala
import org.scalatest.Spec

class SetSpec extends Spec {

  object `A Set` {
    object `when empty` {
      def `should have size 0` {
        assert(Set.empty.size == 0)
      }

      def `should produce NoSuchElementException when head is invoked` {
        intercept[NoSuchElementException] {
          Set.empty.head
        }
      }
    }
  }
}
#+end_src

#+begin_example
 A Set
   when empty
   - should have size 0
   - should produce NoSuchElementException when head is invoked
#+end_example

*** *FunSuite*

- For those who like xUnit-style tests

#+begin_src scala
  import org.scalatest.FunSuite

  class SetSuite extends FunSuite {

    test("An empty Set should have size 0") {
      assert(Set.empty.size == 0)
    }

    test("Invoking head on an empty Set should produce NoSuchElementException") {
      intercept[NoSuchElementException] {
        Set.empty.head
      }
    }
  }
#+end_src

Output:
#+begin_example
 - An empty Set should have size 0
 - Invoking head on an empty Set should produce NoSuchElementException
#+end_example

*** *FeatureSpec*

- Each test represents one *scenario* of a *feature*
- With GivenWhenThen it looks like Gerkin syntax, but you can mix GivenWhenThen into other
  testing styles.

#+begin_src scala
package org.scalatest.examples.featurespec

import org.scalatest._

class TVSet {
  private var on: Boolean = false
  def isOn: Boolean = on
  def pressPowerButton() {
    on = !on
  }
}

class TVSetSpec extends FeatureSpec with GivenWhenThen {

  info("As a TV set owner")
  info("I want to be able to turn the TV on and off")
  info("So I can watch TV when I want")
  info("And save energy when I'm not watching TV")

  feature("TV power button") {
    scenario("User presses power button when TV is off") {

      Given("a TV set that is switched off")
      val tv = new TVSet
      assert(!tv.isOn)

      When("the power button is pressed")
      tv.pressPowerButton()

      Then("the TV should switch on")
      assert(tv.isOn)
    }

    scenario("User presses power button when TV is on") {

      Given("a TV set that is switched on")
      val tv = new TVSet
      tv.pressPowerButton()
      assert(tv.isOn)

      When("the power button is pressed")
      tv.pressPowerButton()

      Then("the TV should switch off")
      assert(!tv.isOn)
    }
  }
}
#+end_src

Output :
#+begin_example
As a TV set owner
I want to be able to turn the TV on and off
So I can watch TV when I want
And save energy when I'm not watching TV
Feature: TV power button
  Scenario: User presses power button when TV is off
    Given a TV set that is switched off
    When the power button is pressed
    Then the TV should switch on
  Scenario: User presses power button when TV is on
    Given a TV set that is switched on
    When the power button is pressed
    Then the TV should switch off
#+end_example

*** *PropSpec*

- This style looks a lot like a poor *man's ScalaCheck -- which is very powerful. 
- It does not appear to me that it has any advantages over just using ScalaCheck.. 

#+begin_src scala

  import org.scalatest._
  import prop._
  import scala.collection.immutable._

  class SetSpec extends PropSpec with TableDrivenPropertyChecks with Matchers {

    val examples =
      Table(
        "set",
        BitSet.empty,
        HashSet.empty[Int],
        TreeSet.empty[Int]
      )

    property("an empty Set should have size 0") {
      forAll(examples) { set =>
        set.size should be (0)
      }
    }

    property("invoking head on an empty set should produce NoSuchElementException") {
      forAll(examples) { set =>
         a [NoSuchElementException] should be thrownBy { set.head }
      }
    }
  }

#+end_src

Output:
#+begin_example
 - an empty Set should have size 0
 - invoking head on an empty set should produce NoSuchElementException
#+end_example


** ScalaTest in detail (mostly with FunSpec)
*** Informers, Documenters, Notifiers, Alerters
**** [[../src/test/scala/testingscala/report/ReportOnSpec.scala][ReportOnSpec.scala]]
- *notifications* and *alerts* are reported immediately
- *info* and *markup* are delayed until results of the test are known
- Note: path.FunSpec by default supports info, but not: markup, note, and alert.
- You won't see the nice notifications in Intellij (far as I know), but will in SBT

*** Tagging, pending, omitting tests
**** [[../src/test/scala/testingscala/certaintests/OmitSpec.scala][OmitSpec.scala]]
- How to ignore tests
- How to pend tests (that don't have a body yet)
**** [[../src/test/scala/testingscala/certaintests/TagSpec.scala][TagSpec.scala]]
- use tagging to selectively run different types of tests
- see examples under "SBT Tasks" above: [[testOnly]]

*** Sharing fixtures between tests
There are several techniques that help you eliminate duplication in the setup/cleanup of
tests. Here are some of them:

**** [[../src/test/scala/testingscala/fixtures/ExampleWithFixture.scala][ExampleWithFixture.scala]]
- The first test uses traits to set up mutable fixture objects 
- The second one uses an anonymous object to do the same thing 
- the BeforeAndAfter trait can be used to do setup and tear-down of common fixture.
- this is okay, but it doesn't allow you to perform setup and clean tasks
  
*** Loaning fixtures
**** [[../src/test/scala/testingscala/fixtures/LoanFixtureSpec.scala][LoanFixtureSpec.scala]]
- roll your own fixtures as methods that take a closure as an argument.  In your test you
  call these methods and make the body of the test a closure you pass back into the
  fixture

*** Using WithFixture
**** [[../src/test/scala/testingscala/fixtures/WithFixtureNoArgSpec.scala][WithFixtureNoArgSpec.scala]]
- set-up fixture methods that loan themselves to the test
- just by overriding WithFixture(test: NoArgTest)  you can define setup and cleanup code
  in one place, and the test framework calls that automatically for every test

**** [[../src/test/scala/testingscala/fixtures/WithFixtureOneArgSpec.scala][WithFixtureOneArgSpec.scala]]
- extends fixture.FunSpec
- you can set up a fixture in your test class:
  - define FixtureParam class
  - implement withFixture(test: OneArgTest)
- it's more elegant than the previous techniques we've used
  
**** [[../src/test/scala/testingscala/fixtures/WithFixtureTraitOneArgSpec.scala][WithFixtureTraitOneArgSpec.scala]]
- To share fixtures *across classes*, define FixtureParam and withFixture in a trait, and
  mix it in any test classes that need this fixture.
- brief explanation of [[http://stackoverflow.com/questions/8073263/explicit-self-references-with-no-type-difference-with-this][explict self-reference]]
- "it" returns an object that registers the test, and when "apply"-ing it can take a
  FixtureParam as a argument (fixture.FunSpecLike.ItWord)
*** Assertions
- Basic scalatest [[http://doc.scalatest.org/2.2.6/#org.scalatest.Assertions][Assertions]] that are move informative than scala's built-in assertions

**** [[../src/test/scala/testingscala/asserts/AssertsSpec.scala][AssertsSpec.scala]]
- assert, assertResult -- more informative than scala's assert.
- assume, cancel

**** [[../src/test/scala/testingscala/asserts/SuperSafeSpec.scala][SuperSafeSpec.scala]]
- it catches some comparisons that scala would otherwise allow by looking more closely at
  the types being compared
- as a compiler plugin it gives you very useful information at compile time; and gives you
  a nice readable description of the problem
- For more details see: [[http://www.artima.com/supersafe_user_guide.html][SuperSafe User Guide]].

**** [[../src/test/scala/testingscala/asserts/ScalacticSpec.scala][ScalacticSpec.scala]]
- This library that's part of ScalaTest helps you normalize objects (usually for comparison)
  - example of 
- It can help you get better errors when you compare the wrong things [[http://www.scalactic.org/user_guide/ConstrainedEquality][(constrained equality)]].

*** Inspectors
- [[http://doc.scalatest.org/2.2.6/#org.scalatest.Inspectors][Inspectors]] provide methods that enable assertions to be made about collections.

| forAll     |   | succeeds if the assertion holds true for every element (report just the first failure) |
| forAtLeast |   | succeeds if the assertion holds true for at least the specified number of elements     |
| forAtMost  |   | succeeds if the assertion holds true for at most the specified number of elements      |
| forBetween |   | succeeds if the assertion holds true for between the specified minimum and maximum     |
|            |   | number of elements,  inclusive                                                         |
| forEvery   |   | same as forAll, but lists all failing elements if it fails                             |
| forExactly |   | succeeds if the assertion holds true for exactly the specified number of elements      |

#+begin_src scala
  import org.scalatest._
  import Assertions._
  import Inspectors._

  val xs = List(1, 2, 3, 4, 5)
  forAll (xs) { x => assert(x > 0) }  // assert on every element of the collection

#+end_src

*** Using Matchers
- mix-in trait scalatest.Matches
- there are matchers in the scalatest.matchers package, but those appear to be deprecated
- Good examples on the [[http://www.scalatest.org/user_guide/using_matchers][ScalaTest Matches]]; will not duplicate those.
  
**** [[../src/test/scala/testingscala/asserts/CoolMatchersSpec.scala][CoolMatchersSpec.scala]]
- to see some of the matchers I found most interesting
- you can also create custom matchers (see [[http://doc.scalatest.org/2.2.6/#org.scalatest.matchers.BeMatcher][an example]]) 
  

** Miscellaneous Other Things

- ScalaTest and integrates with Selenium, junit, etc.
- ScalaMock is the standard Scala mocking library, though you can use mockito or easyMock
  if you want.

*** What's coming up in ScalaTest 3.0
- now fully support Scala.js
- *AsyncFunSuite*, *AsyncFunSpec*, *AsyncFlatSpec*, *AsyncFreeSpec*, *AsyncWordspec*, and
  *AsyncFeatureSpec* (the result type of tests is Future[Assertion])
- *oneElementOf*, *noElementsOf*, *atLeastOneElementOf*, *atMostOneElementOf*,
  *allElementsOf*, *inOrderElementsOf*
- Added overloaded *exists* and *forEvery* methods to TableDrivenPropertyChecks.
  

* ScalaCheck

[[https://www.scalacheck.org][ScalaCheck]] is a testing library that automates test data generation, and performs
property-based tests.

You define properties that specifies the *behavior of your code*, and ScalaCheck
automatically (and randomly) generates data and runs it against your code.

There's a very useful [[https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md][User guide]] on their web site.

** To learn more about property-based testing, check out the following videos:

*** watch: [[https://yow.eventer.com/yow-lambda-jam-2015-1305/practical-property-based-testing-by-charles-o-farrell-1884][Practical Property-Based Testing]] 
  - symmetry works great with property-based testing, even if you only need to go in one
    direction
  - model-based patterns: may need to tweak generated values to link things properly to
    get usable data (see postal code example)
  - idempotent tests are easy to write
  - performance can be an issue, but you can configure how many times to run a test
-  - invest time into writing good generators

*** watch: [[https://www.youtube.com/watch?v=shngiiBfD80][Property-Based Testing for better Code]]
  - contrasting "example-based test" with property-based tests (aka.: anecdotes vs
    evidence)


** Examples:

*** [[../src/test/scala/testingscala/scalacheck/BasicPropertiesSpec.scala][BasicPropertiesSpec.scala]]
- an examples of properties
  
*** [[../src/test/scala/testingscala/scalacheck/StringUtilsPropsSpec.scala][StringUtilsPropsSpec.scala]] and main class:  [[../src/main/scala/testingscala/scalacheck/StringUtils.scala][StringUtils.scala]]
- slightly more complicated tests
- using custom generators

*** [[../src/test/scala/testingscala/scalacheck/GeneratorsSpec.scala][GeneratorsSpec.scala]]
- more with custom generators

*** [[../src/test/scala/testingscala/scalacheck/ScalaTestSpec.scala][ScalaTestSpec.scala]]
- how to integrate ScalaCheck with ScalaTest


